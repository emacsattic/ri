#!/usr/bin/env ruby

# ri_repl --- Completion/lookup script for use with ri.el
# See http://www.emacswiki.org/cgi-bin/wiki/RiEl

require 'rubygems'
gem 'rdoc', '>= 2.2.1'

require 'rdoc/ri'
require 'rdoc/ri/driver'
require 'stringio'

class RDoc::RI::Driver
  # We don't want to exit on not found
  def abort(msg); warn msg end
end

module RDoc
  module RI
    module_function

    @driver = RI::Driver.new # Piggy-back on some of this functionality

    def repl(input = $stdin)
      loop do
        $stdout = StringIO.new

        string = input.gets.chomp
        output = if string =~ /^Complete: (.+)$/
                   complete(Regexp.last_match[1])
                 else
                   begin
                     Driver.run [string]
                     $stdout.rewind
                     $stdout.read
                   rescue => e
                     e.message
                   end
                 end
        
        STDOUT.puts output
      end
    end

    def complete(string)
      targets = if string =~ /(#|::[a-z]|\.[a-z])/
                  complete_absolute_method(string)
                elsif string =~ /^[A-Z]/
                  complete_constant(string)
                else
                  complete_method_only(string)
                end

      '(' + targets.map{ |m| "\"#{m}\"" }.join(' ') + ')'
    end

    def complete_absolute_method(string, methods = [])
      klass, method = @driver.parse_name(string)
      pattern = /^#{method}/

      class_cache[klass.to_s]["instance_methods"].map{|h|h["name"]}.grep(pattern) do |name|
        methods << klass + '#' + name
      end
      class_cache[klass.to_s]["class_methods"].map{|h|h["name"]}.grep(pattern) do |name|
        methods << klass + '::' + name 
      end
      return methods
    end

    def complete_constant(string)
      pattern = /^#{string}/
      class_cache.keys.grep(pattern)
    end

    def complete_method_only(string, methods = [])
      pattern = /^#{string}/
      class_cache.keys.sort.each do |klass|
        class_cache[klass]["instance_methods"].map{|h|h["name"]}.grep(pattern) do |name|
          methods << klass + '#' + name if load_cache_for(klass)[klass+'#'+name]
        end
        class_cache[klass]["class_methods"].map{|h|h["name"]}.grep(pattern) do |name|
          methods << klass + '::' + name  if load_cache_for(klass)[klass+'::'+name]
        end
      end
      return methods
    end

    def class_cache; @driver.class_cache end
    def load_cache_for(klassname); @driver.load_cache_for(klassname) end
  end
end

RDoc::RI.repl if __FILE__ == $0
