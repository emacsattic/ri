#!/usr/bin/env ruby

# A REPL for RI.
# Originally designed to work with ri.el: http://www.emacswiki.org/cgi-bin/wiki/RiEl

require 'rubygems'
gem 'rdoc', '>= 2.2.1'
require 'rdoc/ri/driver'
require 'stringio'
require 'readline'

module RDoc::RI::Repl
  @driver = Driver.new # Piggy-back on a built-in RI class

  module_function

  Readline.completion_proc = lambda {|string| RDoc::RI.complete(string) }

  def start(input = $stdin)
    loop do
      if input.tty?
        string = Readline.readline('RI: ') or exit 0
      else
        string = input.gets
      end

      if string =~ /^Complete: (.+)$/
        puts complete(Regexp.last_match[1]).join("\n")
      else
        Driver.run [string.strip]
      end
    end
  end

  def complete(string)
    if string =~ /::$|\.$/ # Method or constant
      complete_absolute_method(string) + complete_constant(string)
    elsif string =~ /(#|::[a-z]|\.[a-z])/ # Method inside constant
      complete_absolute_method(string)
    elsif string =~ /^[A-Z]/ # Just constant
      complete_constant(string)
    else # Just method (in any constant)
      complete_method_any_class(string)
    end
  end

  def complete_absolute_method(string, methods = [])
    if string =~ /(.+)(\#|\.|::)$/ # Special case for no method name
      klass = Regexp.last_match[1] 
      pattern = Regexp.new('.')
    else
      klass, method = @driver.parse_name(string)
      pattern = Regexp.new(method)
    end

    separator = string =~ /\./ ? '.' : '::'

    cache[klass]["instance_methods"].map{|h|h["name"]}.grep(pattern) do |name|
      methods << klass + '#' + name
    end
    unless string =~ /#/
      cache[klass]["class_methods"].map{|h|h["name"]}.grep(pattern) do |name|
        methods << klass + separator + name
      end
    end
    return methods
  end

  def complete_constant(string)
    cache.keys.grep(/^#{string}/)
  end

  def complete_method_any_class(string, methods = [])
    pattern = /^#{string}/
    cache.keys.sort.each do |klass|
      cache[klass]["instance_methods"].map{|h|h["name"]}.grep(pattern) do |name|
        methods << klass + '#' + name if load_cache_for(klass)[klass+'#'+name]
      end
      cache[klass]["class_methods"].map{|h|h["name"]}.grep(pattern) do |name|
        methods << klass + '::' + name  if load_cache_for(klass)[klass+'::'+name]
      end
    end
    return methods
  end

  def cache; @driver.class_cache end
  def load_cache_for(k); @driver.load_cache_for(k) end
end

RDoc::RI::Repl.start if __FILE__ == $0
